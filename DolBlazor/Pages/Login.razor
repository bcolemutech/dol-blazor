@page "/login"
@using dol_sdk.Services
@using DolBlazor.Models
@using Microsoft.AspNetCore.Components
@inject ISecurityService Security
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="user.Username" class="form-control"/>
                <ValidationMessage For="@(() => user.Username)"/>
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="user.Password" type="password" class="form-control"/>
                <ValidationMessage For="@(() => user.Password)"/>
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            @* <NavLink href="account/register" class="btn btn-link">Register</NavLink> *@
        </EditForm>
    </div>
</div>

@code {

    private User user = new User();
    private bool loading;

    private async Task OnValidSubmit()
    {
        loading = true;
        try
        {
            await Security.Login(user);
            if (Security.Identity?.User == null)
            {
                const string message = "Login failed! Try again.";
                await JS.InvokeAsync<object>("alert", message);
                loading = false;
                StateHasChanged();
            }
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception e)
        {
            var message = e.Message;
            await JS.InvokeAsync<object>("alert", message);
            loading = false;
            StateHasChanged();
        }
    }
}
